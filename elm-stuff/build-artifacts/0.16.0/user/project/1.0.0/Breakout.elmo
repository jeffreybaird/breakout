Elm.Breakout = Elm.Breakout || {};
Elm.Breakout.make = function (_elm) {
   "use strict";
   _elm.Breakout = _elm.Breakout || {};
   if (_elm.Breakout.values) return _elm.Breakout.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Color = Elm.Color.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Graphics$Collage = Elm.Graphics.Collage.make(_elm),
   $Graphics$Element = Elm.Graphics.Element.make(_elm),
   $Keyboard = Elm.Keyboard.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Text = Elm.Text.make(_elm),
   $Time = Elm.Time.make(_elm),
   $Window = Elm.Window.make(_elm);
   var _op = {};
   var textIvory = A3($Color.rgb,255,255,240);
   var txt = function (f) {
      return function (_p0) {
         return $Graphics$Element.leftAligned(f($Text.monospace(A2($Text.color,textIvory,$Text.fromString(_p0)))));
      };
   };
   var breakoutCharcoal = A3($Color.rgb,54,69,79);
   var displayObj = F2(function (obj,shape) {
      return A2($Graphics$Collage.move,{ctor: "_Tuple2",_0: obj.x,_1: obj.y},A2($Graphics$Collage.filled,$Color.white,shape));
   });
   var _p1 = {ctor: "_Tuple2",_0: 300,_1: 200};
   var halfWidth = _p1._0;
   var halfHeight = _p1._1;
   var _p2 = {ctor: "_Tuple2",_0: 600,_1: 400};
   var gameWidth = _p2._0;
   var gameHeight = _p2._1;
   var display = F2(function (_p4,_p3) {
      var _p5 = _p4;
      var _p6 = _p3;
      var scores = A2(txt,$Text.height(50),$Basics.toString(10));
      return A4($Graphics$Element.container,
      _p5._0,
      _p5._1,
      $Graphics$Element.middle,
      A3($Graphics$Collage.collage,
      gameWidth,
      gameHeight,
      _U.list([A2($Graphics$Collage.filled,breakoutCharcoal,A2($Graphics$Collage.rect,gameWidth,gameHeight))
              ,A2(displayObj,_p6.player,A2($Graphics$Collage.rect,40,10))])));
   });
   var updateGame = F2(function (game,player_lcl) {    return _U.update(game,{player: player_lcl});});
   var stepObj = F2(function (t,_p7) {    var _p8 = _p7;return _U.update(_p8,{x: _p8.x + _p8.vx * t,y: _p8.y + _p8.vy * t});});
   var stepPlayer = F3(function (time,direction,player) {
      var score$ = player.score + 1;
      var player$ = A2(stepObj,time,_U.update(player,{vx: $Basics.toFloat(direction) * 300}));
      var x$ = A3($Basics.clamp,22 - halfWidth,halfWidth - 22,player$.x);
      return _U.update(player$,{x: x$,score: score$});
   });
   var stepGame = F2(function (input,game) {
      var _p9 = game;
      var state = _p9.state;
      var player = _p9.player;
      var _p10 = input;
      var paddle = _p10.paddle;
      var delta = _p10.delta;
      var player$ = A3(stepPlayer,delta,paddle,player);
      return _U.update(game,{player: player$});
   });
   var delta = A2($Signal.map,$Time.inSeconds,$Time.fps(35));
   var makePlayer = function (x) {    return {x: x,y: 10 - halfHeight,vy: 0.0,vx: 0.0,score: 0};};
   var Game = F2(function (a,b) {    return {state: a,player: b};});
   var Input = F2(function (a,b) {    return {paddle: a,delta: b};});
   var input = A2($Signal.sampleOn,delta,A3($Signal.map2,Input,A2($Signal.map,function (_) {    return _.x;},$Keyboard.arrows),delta));
   var Pause = {ctor: "Pause"};
   var defaultGame = {state: Pause,player: makePlayer(gameHeight)};
   var gameState = A3($Signal.foldp,stepGame,defaultGame,input);
   var main = A3($Signal.map2,display,$Window.dimensions,gameState);
   var Play = {ctor: "Play"};
   return _elm.Breakout.values = {_op: _op
                                 ,Play: Play
                                 ,Pause: Pause
                                 ,Input: Input
                                 ,Game: Game
                                 ,makePlayer: makePlayer
                                 ,delta: delta
                                 ,defaultGame: defaultGame
                                 ,input: input
                                 ,stepObj: stepObj
                                 ,stepPlayer: stepPlayer
                                 ,updateGame: updateGame
                                 ,stepGame: stepGame
                                 ,gameState: gameState
                                 ,gameHeight: gameHeight
                                 ,gameWidth: gameWidth
                                 ,halfHeight: halfHeight
                                 ,halfWidth: halfWidth
                                 ,displayObj: displayObj
                                 ,breakoutCharcoal: breakoutCharcoal
                                 ,textIvory: textIvory
                                 ,txt: txt
                                 ,display: display
                                 ,main: main};
};