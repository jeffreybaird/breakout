Elm.Game = Elm.Game || {};
Elm.Game.make = function (_elm) {
   "use strict";
   _elm.Game = _elm.Game || {};
   if (_elm.Game.values) return _elm.Game.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Ball = Elm.Ball.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Bricks = Elm.Bricks.make(_elm),
   $Constants = Elm.Constants.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Keyboard = Elm.Keyboard.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Object = Elm.Object.make(_elm),
   $Player = Elm.Player.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Time = Elm.Time.make(_elm);
   var _op = {};
   var stepObj = F2(function (t,_p0) {    var _p1 = _p0;return _U.update(_p1,{x: _p1.x + _p1.vx * t,y: _p1.y + _p1.vy * t});});
   var stepBall = F4(function (time,_p2,player,bricks) {
      var _p3 = _p2;
      var _p5 = _p3.x;
      var _p4 = _p3;
      var bwb = A2($List.any,$Ball.isTrue,A2($List.map,$Ball.withinBrick(_p4),bricks));
      var d = A2($Debug.watch,"BWB",bwb);
      return A2(stepObj,
      time,
      _U.update(_p4,
      {vy: A3($Ball.stepV,_p3.vy,A2($Ball.within,_p4,player),_U.cmp(_p3.y,$Constants.halfHeight - 7) > 0 || bwb)
      ,vx: A3($Ball.stepV,_p3.vx,_U.cmp(_p5,7 - $Constants.halfWidth) < 0,_U.cmp(_p5,$Constants.halfWidth - 7) > 0)}));
   });
   var remove = F2(function (brick,ball) {
      var br = A2($Debug.watch,"Brick",_U.list([brick.x,brick.y]));
      var b = A2($Debug.watch,"Ball",_U.list([ball.x,ball.y]));
      return A2($Ball.withinBrick,ball,brick) ? 1000.0 - $Constants.gameHeight : brick.x;
   });
   var stepBrick = F3(function (time,ball,_p6) {    var _p7 = _p6;var _p8 = _p7;return A2(stepObj,time,_U.update(_p8,{x: A2(remove,_p8,ball)}));});
   var stepBricks = F3(function (time,bricks,ball) {
      var br = A2($Debug.watch,"Bricks X",A2($List.map,function (_) {    return _.x;},bricks));
      var brs = A2($Debug.watch,"Bricks",A2($List.map,$Ball.withinBrick(ball),bricks));
      return A2($List.map,A2(stepBrick,time,ball),bricks);
   });
   var delta = A2($Signal.map,$Time.inSeconds,$Time.fps(35));
   var Game = F4(function (a,b,c,d) {    return {ball: a,state: b,player: c,bricks: d};});
   var Input = F2(function (a,b) {    return {paddle: a,delta: b};});
   var input = A2($Signal.sampleOn,delta,A3($Signal.map2,Input,A2($Signal.map,function (_) {    return _.x;},$Keyboard.arrows),delta));
   var Pause = {ctor: "Pause"};
   var stepGame = F2(function (input,game) {
      var _p9 = game;
      var ball = _p9.ball;
      var state = _p9.state;
      var player = _p9.player;
      var bricks = _p9.bricks;
      var _p10 = input;
      var paddle = _p10.paddle;
      var delta = _p10.delta;
      var bricks$ = A3(stepBricks,delta,bricks,ball);
      var player$ = A3($Player.stepPlayer,delta,paddle,player);
      var ball$ = _U.eq(state,Pause) ? ball : A4(stepBall,delta,ball,player,bricks);
      return _U.update(game,{player: player$,ball: ball$});
   });
   var Play = {ctor: "Play"};
   var defaultGame = {ball: {x: 0,y: 0,vy: -100,vx: 100},state: Play,player: $Player.makePlayer($Constants.gameHeight),bricks: $Bricks.createBricks};
   var gameState = A3($Signal.foldp,stepGame,defaultGame,input);
   return _elm.Game.values = {_op: _op
                             ,Play: Play
                             ,Pause: Pause
                             ,Input: Input
                             ,Game: Game
                             ,delta: delta
                             ,remove: remove
                             ,stepObj: stepObj
                             ,stepBricks: stepBricks
                             ,stepBrick: stepBrick
                             ,defaultGame: defaultGame
                             ,input: input
                             ,stepBall: stepBall
                             ,stepGame: stepGame
                             ,gameState: gameState};
};