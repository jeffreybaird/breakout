Elm.Ball = Elm.Ball || {};
Elm.Ball.make = function (_elm) {
   "use strict";
   _elm.Ball = _elm.Ball || {};
   if (_elm.Ball.values) return _elm.Ball.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Bricks = Elm.Bricks.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Object = Elm.Object.make(_elm),
   $Player = Elm.Player.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var _op = {};
   var near = F3(function (object1,distance,object2) {    return _U.cmp(object2,object1 - distance) > -1 && _U.cmp(object2,object1 + distance) < 1;});
   var within = F2(function (ball,player) {    return A3(near,player.x,8,ball.x) && A3(near,player.y,20,ball.y);});
   var stepV = F3(function (v,lowerCollision,upperCollision) {    return lowerCollision ? $Basics.abs(v) : upperCollision ? 0 - $Basics.abs(v) : v;});
   var withinBrick = F2(function (ball,brick) {    return A3(near,ball.x,30,brick.x) && A3(near,ball.y,16,brick.y);});
   var isTrue = function (x) {    return _U.eq(x,true);};
   var ballWithinBricks = F2(function (ball,bricks) {    return A2($List.any,isTrue,A2($List.map,withinBrick(ball),bricks));});
   return _elm.Ball.values = {_op: _op,isTrue: isTrue,withinBrick: withinBrick,ballWithinBricks: ballWithinBricks,stepV: stepV,near: near,within: within};
};